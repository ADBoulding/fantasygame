<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the text box
text = " ";
subject = "";
cmdText = "";
argText = "";
cmdTrue = false;
argTrue = false;
npcText = "";
npcTrue = false;
whoTalk = 0;
debug = true;

command = "";
enabled_keys = "ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890,./&lt;&gt;?;':[]-=`~";
draw_set_font(fnt_main);
blink = false;
blinkSpeed = 15;
alarm[0] = blinkSpeed;


///command list
 






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blink Alarm
blink = !blink;
alarm[0] = blinkSpeed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the text
draw_roundrect(64, y-20, room_width - 64, y+string_height(text)+20, true);
draw_text_ext(70, y, text, 32, (room_width-64)-70);
if blink
{
    var length = string_width(text);
    var height = string_height(text);
    
    draw_line(70 + length, y, 70 + length, y + height);
}
if debug == true
{
    draw_text(5,10,subject);
    draw_text(5,35,cmdText);
    draw_text(5,60,cmdTrue);
    draw_text(5,85,argText);
    draw_text(5,110,argTrue);
    draw_text(5,135,npcText);
    draw_text(5,160,npcTrue);
    draw_text(80,10,global.player1State);
    draw_text(180,10,global.localeNPC[| 0]);
    draw_text(300,10,global.location);
    draw_text(400,10,global.lSuff);
    draw_text(500,10,obj_player.race);
    draw_text(600,10,obj_player.perception);
    draw_text(700,10,obj_player.talkingTo);
    
    if instance_exists(obj_npc){
    var npc = instance_find(obj_npc,obj_player.talkingTo);
    if npc != noone {
    draw_text(800,10,npc.prog);
    draw_text(800,35,npc.nameVis);
    draw_text(800,60,npc.disposition);
    draw_text(800,85,npc.talkedNum);
    }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting the key input

///---------------------------------------------------bumps empty subject
if (subject = " ")                                  //
{
    subject = "";
}
if (string_pos("  ", subject) != 0)
{
    subject = string_replace(subject, "  "," ");
}
if (string_pos("  ", text) != 0)
{
    text = string_replace(text, "  "," ");
}                                                  //
///---------------------------------------------------end empty subject bump

///----------------------------------------------------handles string addition (adding keys)
if (string_count(chr(keyboard_key), enabled_keys)) and (string_length(chr(keyboard_key)) == 1) and (string_length(text) &lt;(room_width - 134))
{
    blink = true;
    alarm[0] = blinkSpeed;
    text += keyboard_lastchar;
    subject += keyboard_lastchar;
}
///----------------------------------------------------String input end

///----------------------------------------------------handles caps start
if (cmdTrue) and (string_length(subject) = 1) and (subject != " ")
{
    subject = string_upper(subject);
}
if (cmdTrue) and (string_length(subject) &gt; 1) and (string_pos(" ", subject) &gt; (string_pos(cmdText, subject)))
{
    var spaceL = string_pos(" ", subject);
    if spaceL &gt; string_pos(cmdText, subject)
    {
        subject = string_replace(subject, " "+string_char_at(subject, spaceL + 1), " "+string_upper(string_char_at(subject, spaceL + 1))); ///Problem
    }
}    
///-----------------------------------------------------end handles caps

///-----------------------------------------------------*Switches between different lists*
switch global.player1State
{
    case "normal":
        var cmdList = obj_controller.commandList;
        var argList = global.goDest;
        var npcList = global.localeNPC;
        break;
    case "talking":
        var cmdList = obj_dialogue.answerList;
        var argList = obj_dialogue.answerList;
        var npcList = obj_controller.objects;
        break;
    case "combat":
        var cmdList = obj_controller.commandList;
        var argList = global.goDest;
        var npcList = global.localeNPC;
        break;
    default:
        var emptyL = ds_list_create();
        cmdList = emptyL;
        argList = emptyL;
        npcList = emptyL;
        break;
}
///------------------------------------------------------end list chage

///------------------------------------------------------The big one (referencing)
if !keyboard_check(vk_control)
{
    switch(keyboard_key)
    {
        case(vk_space):
            if (subject != "") or (subject != " ")                                                          ///checks if the input in empty already
            {
                if !cmdTrue or !argTrue or !npcTrue                                                         //checks if there is an open input slot
                {  
                    var ltrue = false;
                    if !cmdTrue
                    {
                        var lSize = ds_list_size(cmdList);
                        for (i = 0; i &lt; lSize; i++)                                                        ///creates a for loop to check if the subject is in a command
                        {
                            var cList = ds_list_find_value(cmdList, i); 
                            if (string_pos(string_lower(subject), cList) != 0) and (subject != " ")
                            {
                                subject += " ";
                                ltrue = true;                                                               ///if it passes then it will not reset to ""
                            }
                        }
                    } else if !argTrue or !npcTrue                                                          ///does the same with arguments and npcs
                    {
                        var ltrue = false;
                        if !argTrue
                        {   
                            var lSize = ds_list_size(argList);
                            for (i = 0; i &lt; lSize; i++)
                            {
                                var dList = string_lower(ds_list_find_value(argList, i));
                                if (string_pos(string_lower(subject), dList) != 0) and (subject != " ")
                                {
                                    subject += " "; 
                                    ltrue = true; 
                                }
                            }
                        }
                        if !npcTrue
                        {
                            var lSize = ds_list_size(npcList);
                            for (i = 0; i &lt; lSize; i++)
                            {
                                var nList = (ds_list_find_value(npcList, i));
                                if (string_pos((subject), nList) != 0) and (subject != " ")
                                {
                                    subject += " "; 
                                    ltrue = true; 
                                }
                            }
                        }
                    }       
                    if (ltrue = false)                                                                  //if nothing passes then subject = ""
                    {   
                        subject = "";
                    }  
                } else {
                    subject = "";
                }
            }
            text += " "; 
            break;         
        case(vk_backspace):
            if text != " "
            {
                text = string_copy(text, 0, string_length(text) -1);                                    //if text is not empty, pressing backspace removes the last key
            }
            if subject != ""
            {
                subject = string_copy(subject, 0, string_length(subject) -1);                           //same for the subject
            }
            if cmdTrue and string_pos(cmdText, text) = 0
            {
                subject = string_copy(cmdText, 0, string_length(cmdText) -1);                           //if you press backspace and it removes a command, the command is not the subject
                cmdText = "";
                cmdTrue = false;
            }
            if argTrue and string_pos(string_lower(argText), text) = 0 
            {
                subject = string_copy(argText, 0, string_length(argText) -1);                           //^^same with the arugment
                argText = "";
                argTrue = false;
            }
            if npcTrue and string_pos(string_lower(npcText), text) = 0 
            {
               subject = string_copy(npcText, 0, string_length(npcText) -1);                            //^^same with the npc
                npcText = "";
                npcTrue = false;
            }
            break;
        case(vk_enter):
            if text != " "
            {
                command = string_delete(text, 1, 1);
                text = " ";
                obj_console.console += command + "#";
                if (obj_controller.waitForResponse != true)
                {
                    scr_commands(cmdText, argText, npcText);
                } else {
                    scr_response(command, obj_controller.responseArg, obj_controller.targetArg);
                }
            }
            subject = "";
            cmdText = "";
            argText = "";
            npcText = "";
            cmdTrue = false;
            argTrue = false;
            npcTrue = false;
            break;
        default:
            break;
    }
}
if (ds_list_find_index(cmdList, string_lower(subject)) != -1)                       ///actively checks if the subject is a command
{
    cmdText = subject;
    cmdTrue = true;
} 
if ds_list_find_index(argList, subject) != -1                                 ///actively checks if the subject is an argument
{
    argText = subject;   
    argTrue = true;
}
if ds_list_find_index(npcList, subject) != -1                              ///actively checks if "subject" is an npc
{
   npcText = subject;   
    npcTrue = true;
}

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
